{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.5"
    },
    "colab": {
      "name": " Day 5 Session 2 Titanic.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lsindhungowda/Daily-report/blob/master/Day_5_Session_2_Titanic.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iq_WeZt2WjEx",
        "colab_type": "text"
      },
      "source": [
        "# TITANIC SURVIVOR PREDICTION.\n",
        "\n",
        "#CASE STUDY 2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OfF116o6WjE3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Ignore  the warnings\n",
        "import warnings\n",
        "warnings.filterwarnings('always')\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# data visualisation and manipulation\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import style\n",
        "import seaborn as sns\n",
        "\n",
        "#configure\n",
        "# sets matplotlib to inline and displays graphs below the corressponding cell.\n",
        "% matplotlib inline  \n",
        "style.use('fivethirtyeight')\n",
        "sns.set(style='whitegrid',color_codes=True)\n",
        "\n",
        "#import the necessary modelling algos.\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "\n",
        "#model selection\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YQWiv-IPWjFH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train=pd.read_csv(r'/content/train.csv')\n",
        "#train.head()\n",
        "test=pd.read_csv(r'/content/test.csv')\n",
        "#test.head()\n",
        "df=train.copy()\n",
        "#df.head()\n",
        "test_df=test.copy()\n",
        "#test_df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z1468fv8WjFT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "72808a5b-10b6-42a4-d4c1-a2069ae3a1b8"
      },
      "source": [
        "# now data exploration begins.\n",
        "\n",
        "df.head()\n",
        "df.index\n",
        "df.columns\n",
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(891, 12)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p8NXXe5BWjFj",
        "colab_type": "text"
      },
      "source": [
        "###### the training dataset has 891 rows or training examples and 12 columns or features.Actually one of these is 'Survived' which is our target variable."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6rc7CkDLWjFm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "688d9750-c4c5-4f62-c51c-264e21fc2d06"
      },
      "source": [
        "df.describe()  # displays different descriptive measures of the numerical features."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n",
              "count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n",
              "mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n",
              "std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n",
              "min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n",
              "25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n",
              "50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n",
              "75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n",
              "max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "83mPxGguWjFz",
        "colab_type": "text"
      },
      "source": [
        " \n",
        "######  some observations\n",
        "\n",
        "age has less than 891 implies that it has some missing(Nan) values.\n",
        "\n",
        "the mean of survived indicates that only 38% people survived and rest died.    \n",
        "\n",
        "also the age varies from 0.42 to 80. Age less than 1 yr is represented as decimal.\n",
        "\n",
        "50% denotes the median value of features."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2z03hPH9WjF2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "2d36b758-abc5-4b8e-efa5-4187120bd48b"
      },
      "source": [
        "df.info() # age and cabin both have missing values. also emabarked has some nan values.\n",
        "# can also use .isnull().sum() to get the count of missing values"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ry77k6SGWjGC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 246
        },
        "outputId": "a5f0a628-56ab-450f-c3e1-0bae89556c24"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0            1         0       3  ...   7.2500   NaN         S\n",
              "1            2         1       1  ...  71.2833   C85         C\n",
              "2            3         1       3  ...   7.9250   NaN         S\n",
              "3            4         1       1  ...  53.1000  C123         S\n",
              "4            5         0       3  ...   8.0500   NaN         S\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rietaV7qWjGM",
        "colab_type": "text"
      },
      "source": [
        "###### some key points about features\n",
        "\n",
        "survived is the target variable that we have to predict. 0 means die and 1 means survival.\n",
        "\n",
        "now the relevant features include--\n",
        "\n",
        "Pclass:  \n",
        "\n",
        "Sex:\n",
        "\n",
        "Age:\n",
        "\n",
        "Fare:\n",
        "\n",
        "Embarked:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NBXyU0n8WjGS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "5ff0d12a-2959-463b-aca5-8a6b0bb6c2f7"
      },
      "source": [
        " df.groupby('Survived').Survived.count() # of the given examples 549 people died while only 342 survived."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Survived\n",
              "0    549\n",
              "1    342\n",
              "Name: Survived, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cLTSwawgWjGd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "outputId": "fe7fc972-3ba0-4780-9bf2-c4fde4e647ff"
      },
      "source": [
        "sns.factorplot(x='Survived',data=df,kind='count',palette=['#ff4125','#006400'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f3fccb7e3c8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cwxCzxLuWjGp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "outputId": "12fbef18-6f00-4626-f9c0-facae20fd3b2"
      },
      "source": [
        "# consider 'Sex' feature.\n",
        "df[df.Survived==1].groupby('Sex').Survived.count()\n",
        "pd.crosstab(index=[df.Sex],columns=[df.Survived],margins=True) # set normalize=True to view %."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>81</td>\n",
              "      <td>233</td>\n",
              "      <td>314</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>468</td>\n",
              "      <td>109</td>\n",
              "      <td>577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>549</td>\n",
              "      <td>342</td>\n",
              "      <td>891</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived    0    1  All\n",
              "Sex                    \n",
              "female     81  233  314\n",
              "male      468  109  577\n",
              "All       549  342  891"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yZAQL-2cWjG3",
        "colab_type": "text"
      },
      "source": [
        "###### 233 female survived while only 109 males. This clearly shows that more females survived than males did. the following graph clearly shows the picture."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dw0akhyoWjG5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "outputId": "9c4cbfde-1b6b-46e1-80cd-851f036b9957"
      },
      "source": [
        "sns.factorplot(x='Survived',data=df,hue='Sex',palette=['#0000ff','#FFB6C1'],kind='count',size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f3fbd4559e8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 437.975x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3D2VH1ajWjHI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pd.crosstab(index=[df.Sex],columns=[df.Survived],margins=True,normalize='index')  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1j_cBR2ZWjHX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "outputId": "39c67724-ccab-4e41-feb2-7aaf303fa9cf"
      },
      "source": [
        "sns.factorplot(x='Sex',y='Survived',kind='point',data=df,palette=['#ff4125'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f3fbd638c18>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DuxindoUWjHi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "outputId": "9ac1b07d-ffda-4c0f-d4f5-18ca3501556e"
      },
      "source": [
        "sns.factorplot(x='Sex',y='Survived',data=df,kind='bar',palette=['#0000ff','#FFB6C1'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f3fbd4557b8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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WVkpSaqsrNTs2bPlcDiCFg4AwonfJz68+OKLevrpp9W9e3e1bNlSR44cUXJysmbOnBnMfAAQNvwu3Msvv1xLliyR1+tVaWmp4uLilJiYGMxsABBW6nUc7n//+19t2bJFW7duVWJiokpKSnTo0KFgZQOAsOJ34W7dulX9+/fXypUrNW/ePEnSvn37lJubG6xsABBW/C7c6dOn669//aveeustNWlyeiaiW7du2rFjR9DCAUA48btwDx48qFtuuUWSas4+a9q0qXw+X3CSAUCY8btwO3bsqA0bNtR6btOmTercuXPAQwFAOPL7KIWsrCw9+uij6t27tyorK5Wdna21a9fWzOcCAM7O7z3c6667Th9++KE6deqkoUOH6vLLL9eyZct07bXXBjMfAIQNv/dwv/32WzkcDmVmZgYzDwCELb8Ld9SoUYqJidGgQYM0ePBgtW3bNpi5ACDs+F24Gzdu1IYNG+RyuZSWlqYrr7xSTqdTAwcOVGxsbDAzAkBYOK97mlVWVmrNmjX6+9//rq+++kputzsY2eqFe5qhIeCeZuGjQdzTrKqqSuvWrVNBQYHcbnet6+MCAH6b31MK69ev18qVK7V27Vp16tRJAwcOVG5uLrcxBwA/+V24eXl5GjRokD744AO1a9cumJkAICz5XbgFBQXBzAEAYe+shfv6669rzJgxkqRXXnnlN8c98cQTgU0FAGHorIX7/691y3VvAeD3Oa/DwhoiDgtDQ8BhYeEjpIeFjR07Vh9//LGqqqrOa0PFxcVKT09Xamqq0tPTtXfv3t8c+/3336tbt27Ky8s7r20BQEPkd+H26NFDb731lm699VZNnjxZGzZs0KlTp/zeUE5OjjIyMrRq1SplZGQoOzv7jON8Pp9ycnJ05513+r1uALgQ+F24Dz30kJYtW6bly5erbdu2mj59unr27Klp06adc9mysjJ5PB45nU5JktPplMfjUXl5eZ2x8+fPV+/evZWUlOT/qwCAC0C9zzRLSkrSuHHjNHv2bHXp0kXvvffeOZfxer1KSEiQzWaTJNlsNsXHx8vr9dYat2vXLm3cuFEPPfRQfWMBQIPn93G4krR//365XC599NFHKi8vV//+/TV27NiABDl58qSeffZZvfjiizXFfD4awnUd0DilpKSEOgICrLCwsN7LnO194HfhDh06VHv37lW/fv00adIk3XbbbTU3kzwXu92ukpIS+Xw+2Ww2+Xw+lZaWym6314z56aeftH//fj3yyCOSpCNHjsiyLB07dkzPP/+8vzE5SgFAwAT6Q9SvxrQsS/3799d9992n5s2b13sjsbGxcjgcNZd2dLlccjgciomJqRmTmJioLVu21DyeM2eOfvnlF02ePLne2wOAhsivOdyIiAjNnTtXF1988XlvKDc3V/n5+UpNTVV+fr6mTp0qScrMzNTOnTvPe70AcKHw+8SH++67T9OmTVPHjh2Dnem8cOIDGgJOfAgfwTjxwe853B49eigzM1N33323WrdurYiIiJqfDRs2LODBACDc+F24//73v9WmTRtt3bq11vMREREULgD4we/Cfffdd4OZAwDCnt+Fe7bTeCMj633+BAA0On4X7tVXX11r3vb/+/bbbwMWCADCld+Fu2bNmlqPf/rpJ82fP199+vQJeCgACEd+F26bNm3qPM7Ly9OwYcM0fPjwgAcDgHDzuyZfjx07dsYrfgEA6vJ7D3fixIm15nArKyv15Zdf6q677gpKMAAIN34X7hVXXFHr8cUXX6wRI0bo1ltvDXgoAAhH5yxct9utqKgojRs3TtLpi4lPnz5de/bs0XXXXadu3brpkksuCXpQALjQnXMOd/r06Tp8+HDN42effVb79u1Tenq69uzZo5kzZwY1IACEi3MWblFRkbp37y7p9DVq169fr5kzZ+r+++/XrFmztG7duqCHBIBwcM7C9fl8atq0qSTpq6++UlxcnNq3by/p9IXFjxw5EtyEABAmzlm4nTp10scffyxJKigo0C233FLzs5KSErVo0SJ46QAgjJzzl2ZPP/20xowZo9zcXEVGRmrx4sU1PysoKNANN9wQ1IAAEC7OWbjdu3fXunXrtHfvXiUlJdW6xc4dd9yhgQMHBjUgAIQLv47Dbd68uZKTk+s836FDh4AHAoBwxXUVAcAQChcADKFwAcAQChcADKFwAcAQChcADKFwAcAQChcADKFwAcAQv+/48HsVFxcrKytLFRUVatWqlfLy8pSUlFRrzPLly7Vw4UJFRkbq1KlTGj58uB588EFTEQEgqIwVbk5OjjIyMpSWlqYVK1YoOztbixYtqjUmNTVV99xzjyIiInTs2DENHjxYPXr00FVXXWUqJgAEjZEphbKyMnk8HjmdTkmS0+mUx+Opc8ff5s2b19yosrKy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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r_ybeZwVWjHt",
        "colab_type": "text"
      },
      "source": [
        "######  # around 18% of all males survived whereas around 75% of females survived.  This again shows that females survived in greater number."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FwP_TwvaWjHv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 196
        },
        "outputId": "bc3c55fd-9542-403d-b638-fbbf9752970f"
      },
      "source": [
        "# consider 'Pclass' feature.\n",
        "df[df.Survived==1].groupby('Pclass').Survived.count()\n",
        "pd.crosstab(index=[df.Pclass],columns=[df.Survived],margins=True) # set normalize=index to view rowwise %."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80</td>\n",
              "      <td>136</td>\n",
              "      <td>216</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>97</td>\n",
              "      <td>87</td>\n",
              "      <td>184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>372</td>\n",
              "      <td>119</td>\n",
              "      <td>491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>549</td>\n",
              "      <td>342</td>\n",
              "      <td>891</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived    0    1  All\n",
              "Pclass                 \n",
              "1          80  136  216\n",
              "2          97   87  184\n",
              "3         372  119  491\n",
              "All       549  342  891"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ciaMe8rzWjIE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "a496af6b-03c5-4420-bd8e-947df6053e51"
      },
      "source": [
        "sns.factorplot(x='Survived',y=None,hue='Pclass',kind='count',data=df,size=5,aspect=1,palette=['#ff0000','#006400','#0000ff'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25ef36c438>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 406.6x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jNvLAPiZWjIW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 196
        },
        "outputId": "44084f16-4408-41e7-c7dd-a28841edfd1e"
      },
      "source": [
        "# consider 'Pclass' feature.\n",
        "df[df.Survived==1].groupby('Pclass').Survived.count()\n",
        "pd.crosstab(index=[df.Pclass],columns=[df.Survived],margins=True,normalize=True) # set normalize=index to view rowwise %."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.089787</td>\n",
              "      <td>0.152637</td>\n",
              "      <td>0.242424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.108866</td>\n",
              "      <td>0.097643</td>\n",
              "      <td>0.206510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.417508</td>\n",
              "      <td>0.133558</td>\n",
              "      <td>0.551066</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>0.616162</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived         0         1       All\n",
              "Pclass                                \n",
              "1         0.089787  0.152637  0.242424\n",
              "2         0.108866  0.097643  0.206510\n",
              "3         0.417508  0.133558  0.551066\n",
              "All       0.616162  0.383838  1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3OBZ6SkyWjIm",
        "colab_type": "text"
      },
      "source": [
        "###### this again shows that 38% of people survived that accident. also this highlights that only 9% of total passengers who traveled in Pclass 2 survived and rest died and similarly 15% of passengers in Pclass 1 survived and rest died."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eagNWqaZWjIp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 196
        },
        "outputId": "76741496-2333-4040-b096-bd445f1ff8e3"
      },
      "source": [
        "pd.crosstab(index=[df.Pclass],columns=[df.Survived],margins=True,normalize='index') "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.370370</td>\n",
              "      <td>0.629630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.527174</td>\n",
              "      <td>0.472826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.757637</td>\n",
              "      <td>0.242363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>0.616162</td>\n",
              "      <td>0.383838</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived         0         1\n",
              "Pclass                      \n",
              "1         0.370370  0.629630\n",
              "2         0.527174  0.472826\n",
              "3         0.757637  0.242363\n",
              "All       0.616162  0.383838"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R2mxihQ1WjI8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "4f5cbc9c-9fd9-4158-b680-0f2b84c30449"
      },
      "source": [
        "sns.factorplot(x='Pclass',y='Survived',kind='point',data=df,size=5,aspect=1,palette=['#ff0000'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25ef36cac8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bV-3lyLlWjJH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "5909c5b4-c9b2-4099-ce37-742350e669de"
      },
      "source": [
        "sns.factorplot(x='Pclass',y='Survived',data=df,kind='bar',palette=['#ff0000','#006400','#0000ff'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25ef338e80>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WSToSy-zWjJc",
        "colab_type": "text"
      },
      "source": [
        "###### now this shows an even better picture. 75 % of people died in class 3 and only 24% survived. similarly for class 2.for class 1 only 37% died and rest survived probably bcoz of better facilities.in a nutshell most of the people in pclass 1 survived and most of the people in plass 3 died."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MjDR6QRPWjJf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "1171ff60-546c-4ab6-9fb3-39c903015566"
      },
      "source": [
        "# grouping by both male or female and the respective Pclasses\n",
        "pd.crosstab(index=[df.Sex,df.Pclass],columns=[df.Survived],margins=True) \n",
        "# the result clearly shows that most of the male in class 2 and 3 died and most of the females in class 1 and 2 survived.\n",
        "# see the tabulation below."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th>Pclass</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">female</th>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "      <td>91</td>\n",
              "      <td>94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6</td>\n",
              "      <td>70</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>72</td>\n",
              "      <td>72</td>\n",
              "      <td>144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">male</th>\n",
              "      <th>1</th>\n",
              "      <td>77</td>\n",
              "      <td>45</td>\n",
              "      <td>122</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>91</td>\n",
              "      <td>17</td>\n",
              "      <td>108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>300</td>\n",
              "      <td>47</td>\n",
              "      <td>347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <th></th>\n",
              "      <td>549</td>\n",
              "      <td>342</td>\n",
              "      <td>891</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived         0    1  All\n",
              "Sex    Pclass               \n",
              "female 1         3   91   94\n",
              "       2         6   70   76\n",
              "       3        72   72  144\n",
              "male   1        77   45  122\n",
              "       2        91   17  108\n",
              "       3       300   47  347\n",
              "All            549  342  891"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sOiJPCeiWjJs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "7b2e3fbb-1c6f-49cd-c0d3-b581dadbf73e"
      },
      "source": [
        "sns.factorplot(x='Sex',hue='Pclass',data=df,col='Survived',kind='count',palette=['#ff0000','#006400','#0000ff'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25ef235a90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 766.6x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NeGiT144WjJ2",
        "colab_type": "text"
      },
      "source": [
        "###### the graph highlights the picture very clearly. majority of the males in class 2 and 3 died. this is bcoz they were males and wre traveling in a lower class and hence this makes sense. on the other hand most of the females in class 1 and 2 survived which again makes sense as females were given prioroty and also they were traveling in higher classes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wY_4IQ0nWjJ5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 196
        },
        "outputId": "f1f5cef9-6b16-40c5-d385-40e0e8d4eda6"
      },
      "source": [
        " #now let us see how survival varies with 'Embarked'\n",
        "df.groupby('Embarked').Survived.count() # most of the people were embarked with 'S'\n",
        "\n",
        "pd.crosstab(index=[df.Embarked],columns=[df.Survived],margins=True,normalize='index')\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C</th>\n",
              "      <td>0.446429</td>\n",
              "      <td>0.553571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Q</th>\n",
              "      <td>0.610390</td>\n",
              "      <td>0.389610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>0.663043</td>\n",
              "      <td>0.336957</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>0.617548</td>\n",
              "      <td>0.382452</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived         0         1\n",
              "Embarked                    \n",
              "C         0.446429  0.553571\n",
              "Q         0.610390  0.389610\n",
              "S         0.663043  0.336957\n",
              "All       0.617548  0.382452"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qQXwP2IUWjKL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "e72f97b8-61a8-457b-9c0e-b95415c7a250"
      },
      "source": [
        "sns.factorplot(x='Survived',data=df,hue='Embarked',kind='count',palette=['#ff0000','#006400','#0000ff'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25ef20eac8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 429.8x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IHqnKUJUWjKX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "02b954b4-9520-4ea0-e36b-8137f71511b1"
      },
      "source": [
        "pd.crosstab(index=[df.Sex,df.Embarked],columns=[df.Survived],margins=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th>Embarked</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">female</th>\n",
              "      <th>C</th>\n",
              "      <td>9</td>\n",
              "      <td>64</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Q</th>\n",
              "      <td>9</td>\n",
              "      <td>27</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>63</td>\n",
              "      <td>140</td>\n",
              "      <td>203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">male</th>\n",
              "      <th>C</th>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Q</th>\n",
              "      <td>38</td>\n",
              "      <td>3</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>364</td>\n",
              "      <td>77</td>\n",
              "      <td>441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <th></th>\n",
              "      <td>549</td>\n",
              "      <td>340</td>\n",
              "      <td>889</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived           0    1  All\n",
              "Sex    Embarked               \n",
              "female C           9   64   73\n",
              "       Q           9   27   36\n",
              "       S          63  140  203\n",
              "male   C          66   29   95\n",
              "       Q          38    3   41\n",
              "       S         364   77  441\n",
              "All              549  340  889"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6HMa-pIiWjKq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "a2f03dca-8f4a-4496-c05f-0ce64a74ff8c"
      },
      "source": [
        "sns.factorplot(x='Sex',data=df,kind='count',hue='Embarked',col='Survived',palette=['#ff0000','#006400','#0000ff'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25ef0f75c0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 789.8x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OSQw4Rs3WjK-",
        "colab_type": "text"
      },
      "source": [
        "###### the graph clearly shows that majority of the males embarked with S died . also very few females died who were embarked C or Q."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZJOV71EfWjLA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375
        },
        "outputId": "b5c72ad6-d233-4c8e-dd94-cd38ce75168e"
      },
      "source": [
        "pd.crosstab(index=[df.Pclass,df.Embarked],columns=[df.Survived],margins=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <th>Embarked</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">1</th>\n",
              "      <th>C</th>\n",
              "      <td>26</td>\n",
              "      <td>59</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Q</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>53</td>\n",
              "      <td>74</td>\n",
              "      <td>127</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">2</th>\n",
              "      <th>C</th>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Q</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>88</td>\n",
              "      <td>76</td>\n",
              "      <td>164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">3</th>\n",
              "      <th>C</th>\n",
              "      <td>41</td>\n",
              "      <td>25</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Q</th>\n",
              "      <td>45</td>\n",
              "      <td>27</td>\n",
              "      <td>72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>286</td>\n",
              "      <td>67</td>\n",
              "      <td>353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <th></th>\n",
              "      <td>549</td>\n",
              "      <td>340</td>\n",
              "      <td>889</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Survived           0    1  All\n",
              "Pclass Embarked               \n",
              "1      C          26   59   85\n",
              "       Q           1    1    2\n",
              "       S          53   74  127\n",
              "2      C           8    9   17\n",
              "       Q           1    2    3\n",
              "       S          88   76  164\n",
              "3      C          41   25   66\n",
              "       Q          45   27   72\n",
              "       S         286   67  353\n",
              "All              549  340  889"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UzLTcaydWjLI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "0d588edb-6d72-4d3e-e795-11baa3234750"
      },
      "source": [
        "sns.factorplot(x='Survived',col='Embarked',data=df,hue='Pclass',kind='count',palette=['#ff0000','#006400','#0000ff'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25ef087a58>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1126.6x360 with 3 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mobY3W6sWjLS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        " # now we need to convert categorical variables into numerical for modelling.\n",
        " # can use labels or sep col using get_dummies()\n",
        "\n",
        "#sex\n",
        "for frame in [train,test,df,test_df]:\n",
        "    frame.loc[frame.Sex=='male','Sex']=0\n",
        "    frame.loc[frame.Sex=='female','Sex']=1\n",
        "    \n",
        "#embarked    \n",
        "for frame in [train,test,df,test_df]:\n",
        "    frame.loc[frame.Embarked=='C','Embarked']=0\n",
        "    frame.loc[frame.Embarked=='S','Embarked']=1\n",
        "    frame.loc[frame.Embarked=='Q','Embarked']=2\n",
        "#df.head(10)\n",
        "        "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EMgngRXUWjLa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "outputId": "4e0b2863-24a7-45a6-a2f1-f7ec22ec2cd9"
      },
      "source": [
        "#now age and fare are continuous variables.\n",
        "#we can convert them to discrete intervals.\n",
        "\n",
        "#age\n",
        "df.Age.describe()   # age varies from 0.42 to 80.00\n",
        "for frame in [train,test,df,test_df]:\n",
        "    frame['bin_age']=np.nan\n",
        "    frame['bin_age']=np.floor(frame['Age'])//10\n",
        "    frame['bin_fare']=np.nan\n",
        "    frame['bin_fare']=np.floor(frame['Fare'])//50\n",
        "    \n",
        "df.head(10)[['Fare','bin_fare','Age','bin_age']] \n",
        "# df.bin_age.unique()\n",
        "# df.bin_fare.unique()\n",
        " "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Fare</th>\n",
              "      <th>bin_fare</th>\n",
              "      <th>Age</th>\n",
              "      <th>bin_age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.2500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>71.2833</td>\n",
              "      <td>1.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.9250</td>\n",
              "      <td>0.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>53.1000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8.0500</td>\n",
              "      <td>0.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8.4583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>51.8625</td>\n",
              "      <td>1.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>21.0750</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>11.1333</td>\n",
              "      <td>0.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>30.0708</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      Fare  bin_fare   Age  bin_age\n",
              "0   7.2500       0.0  22.0      2.0\n",
              "1  71.2833       1.0  38.0      3.0\n",
              "2   7.9250       0.0  26.0      2.0\n",
              "3  53.1000       1.0  35.0      3.0\n",
              "4   8.0500       0.0  35.0      3.0\n",
              "5   8.4583       0.0   NaN      NaN\n",
              "6  51.8625       1.0  54.0      5.0\n",
              "7  21.0750       0.0   2.0      0.0\n",
              "8  11.1333       0.0  27.0      2.0\n",
              "9  30.0708       0.0  14.0      1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R4kpe5KPWjLr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 196
        },
        "outputId": "adebf747-e2f9-4f28-b72c-f3cb89c54c2c"
      },
      "source": [
        "#can drop Age and Fare columns\n",
        "for frame in [train,df,test_df,test]:\n",
        "    frame.drop(['Age','Fare'],axis=1,inplace=True)\n",
        "# df.head()\n",
        "test.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>bin_age</th>\n",
              "      <th>bin_fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>Myles, Mr. Thomas Francis</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>240276</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3101298</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Pclass  ... bin_age bin_fare\n",
              "0          892       3  ...     3.0      0.0\n",
              "1          893       3  ...     4.0      0.0\n",
              "2          894       2  ...     6.0      0.0\n",
              "3          895       3  ...     2.0      0.0\n",
              "4          896       3  ...     2.0      0.0\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4zB9sbFXWjL4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "outputId": "2cb919a4-791a-4182-c7ff-09be6f0b5332"
      },
      "source": [
        "#now we can see how survival varies with bin_age and bin_fare.\n",
        "df.groupby('bin_age').Survived.count()\n",
        "pd.crosstab(index=[df.bin_age],columns=[df.Survived],margins=True)\n",
        "pd.crosstab(index=[df.Sex,df.Survived],columns=[df.bin_age,df.Pclass],margins=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>bin_age</th>\n",
              "      <th colspan=\"3\" halign=\"left\">0.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">1.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">2.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">3.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">4.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">5.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">6.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">7.0</th>\n",
              "      <th>8.0</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th>Survived</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>38</td>\n",
              "      <td>9</td>\n",
              "      <td>28</td>\n",
              "      <td>86</td>\n",
              "      <td>11</td>\n",
              "      <td>28</td>\n",
              "      <td>45</td>\n",
              "      <td>15</td>\n",
              "      <td>7</td>\n",
              "      <td>23</td>\n",
              "      <td>11</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>13</td>\n",
              "      <td>8</td>\n",
              "      <td>13</td>\n",
              "      <td>15</td>\n",
              "      <td>22</td>\n",
              "      <td>15</td>\n",
              "      <td>27</td>\n",
              "      <td>16</td>\n",
              "      <td>7</td>\n",
              "      <td>13</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <th></th>\n",
              "      <td>3</td>\n",
              "      <td>17</td>\n",
              "      <td>42</td>\n",
              "      <td>18</td>\n",
              "      <td>18</td>\n",
              "      <td>66</td>\n",
              "      <td>34</td>\n",
              "      <td>53</td>\n",
              "      <td>133</td>\n",
              "      <td>50</td>\n",
              "      <td>48</td>\n",
              "      <td>69</td>\n",
              "      <td>37</td>\n",
              "      <td>18</td>\n",
              "      <td>34</td>\n",
              "      <td>27</td>\n",
              "      <td>15</td>\n",
              "      <td>6</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>714</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "bin_age      0.0         1.0         2.0      ... 6.0       7.0       8.0  All\n",
              "Pclass         1   2   3   1   2   3   1   2  ...   1  2  3   1  2  3   1     \n",
              "Sex Survived                                  ...                             \n",
              "0   0          0   0  13   3   9  38   9  28  ...   9  2  2   3  1  2   0  360\n",
              "    1          2   9   8   2   1   4   9   0  ...   1  1  0   0  0  0   1   93\n",
              "1   0          1   0  10   0   0  11   1   3  ...   0  0  0   0  0  0   0   64\n",
              "    1          0   8  11  13   8  13  15  22  ...   3  0  1   0  0  0   0  197\n",
              "All            3  17  42  18  18  66  34  53  ...  13  3  3   3  1  2   1  714\n",
              "\n",
              "[5 rows x 26 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4vpQL7dIWjMG",
        "colab_type": "text"
      },
      "source": [
        "###### all the males and females in Pclass 2 and first bin_age survived the accident which hints that children were given preference. also note that in Pclass 1 and bin_age 2,3,4 almost all the people survived which again shows that people in Pclass 1 had better facilities.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uq2N_E-pWjMH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "7c2593bf-6b3e-4a7a-900b-587863abb791"
      },
      "source": [
        "sns.factorplot(x='bin_age',hue='Survived',kind='count',data=df,palette=['#ff4125','#006400'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25eee2b400>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 421.55x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zy6ptmwQWjMQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "outputId": "3be2243a-dcb5-479a-db60-3c18c843f164"
      },
      "source": [
        "#similarly for bin_fare\n",
        "df.groupby('bin_fare').Survived.count()\n",
        "pd.crosstab(index=[df.bin_fare],columns=[df.Survived],margins=True)\n",
        "pd.crosstab(index=[df.Sex,df.Survived],columns=[df.bin_fare,df.Pclass],margins=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>bin_fare</th>\n",
              "      <th colspan=\"3\" halign=\"left\">0.0</th>\n",
              "      <th colspan=\"3\" halign=\"left\">1.0</th>\n",
              "      <th>2.0</th>\n",
              "      <th>3.0</th>\n",
              "      <th>4.0</th>\n",
              "      <th>5.0</th>\n",
              "      <th>10.0</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th>Survived</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>86</td>\n",
              "      <td>294</td>\n",
              "      <td>24</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>17</td>\n",
              "      <td>42</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>68</td>\n",
              "      <td>72</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <th></th>\n",
              "      <td>76</td>\n",
              "      <td>177</td>\n",
              "      <td>477</td>\n",
              "      <td>87</td>\n",
              "      <td>7</td>\n",
              "      <td>14</td>\n",
              "      <td>24</td>\n",
              "      <td>9</td>\n",
              "      <td>11</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>891</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "bin_fare     0.0           1.0        2.0 3.0 4.0 5.0 10.0  All\n",
              "Pclass         1    2    3   1  2   3   1   1   1   1    1     \n",
              "Sex Survived                                                   \n",
              "0   0         41   86  294  24  5   6   5   1   4   2    0  468\n",
              "    1         23   17   42  15  0   5   4   1   0   0    2  109\n",
              "1   0          1    6   69   0  0   3   0   2   0   0    0   81\n",
              "    1         11   68   72  48  2   0  15   5   7   4    1  233\n",
              "All           76  177  477  87  7  14  24   9  11   6    3  891"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GT6_7b2cWjMY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "outputId": "d8800f3c-9e00-4df8-b8f3-4e50e30ad36e"
      },
      "source": [
        "sns.factorplot(x='bin_fare',hue='Survived',kind='count',data=df,palette=['#ff4125','#006400'],size=5,aspect=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f25eee989b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 421.55x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xVEq5skgWjMh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 604
        },
        "outputId": "819817a2-5594-46d1-9f85-ddfdbbdc4ffe"
      },
      "source": [
        "df.info()\n",
        "# embarked and bin_age still have null values.\n",
        "df.describe(include=[np.number])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   SibSp        891 non-null    int64  \n",
            " 6   Parch        891 non-null    int64  \n",
            " 7   Ticket       891 non-null    object \n",
            " 8   Cabin        204 non-null    object \n",
            " 9   Embarked     889 non-null    object \n",
            " 10  bin_age      714 non-null    float64\n",
            " 11  bin_fare     891 non-null    float64\n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>bin_age</th>\n",
              "      <th>bin_fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>2.525210</td>\n",
              "      <td>0.322110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>1.497097</td>\n",
              "      <td>0.959022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       PassengerId    Survived      Pclass  ...       Parch     bin_age    bin_fare\n",
              "count   891.000000  891.000000  891.000000  ...  891.000000  714.000000  891.000000\n",
              "mean    446.000000    0.383838    2.308642  ...    0.381594    2.525210    0.322110\n",
              "std     257.353842    0.486592    0.836071  ...    0.806057    1.497097    0.959022\n",
              "min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n",
              "25%     223.500000    0.000000    2.000000  ...    0.000000    2.000000    0.000000\n",
              "50%     446.000000    0.000000    3.000000  ...    0.000000    2.000000    0.000000\n",
              "75%     668.500000    1.000000    3.000000  ...    0.000000    3.000000    0.000000\n",
              "max     891.000000    1.000000    3.000000  ...    6.000000    8.000000   10.000000\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C3NpMGrNWjM2",
        "colab_type": "text"
      },
      "source": [
        "######  now both of these columns have some missing values and so we need to fill the missing values. for now we impute with the median.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sG9ZAmpRWjM4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "95ea28fe-4792-422d-9e0c-f640cfca2041"
      },
      "source": [
        "for frame in [test,train,df,test_df]:\n",
        "    frame.bin_age.fillna(frame.bin_age.median(),inplace=True)\n",
        "    frame.Embarked.fillna(frame.Embarked.median(),inplace=True)\n",
        "    frame.bin_fare.fillna(frame.bin_fare.median(),inplace=True)\n",
        "# just to check \n",
        "df.info()\n",
        "    "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   SibSp        891 non-null    int64  \n",
            " 6   Parch        891 non-null    int64  \n",
            " 7   Ticket       891 non-null    object \n",
            " 8   Cabin        204 non-null    object \n",
            " 9   Embarked     891 non-null    float64\n",
            " 10  bin_age      891 non-null    float64\n",
            " 11  bin_fare     891 non-null    float64\n",
            "dtypes: float64(3), int64(5), object(4)\n",
            "memory usage: 83.7+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4G7tWU-3WjND",
        "colab_type": "text"
      },
      "source": [
        "######  data exploration, cleaning and preprocessing ends. Now can move onto modelling algorithms."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cV63gsfVWjNI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "outputId": "77d08e1a-ee97-431f-cef8-488ff10efad2"
      },
      "source": [
        "for frame in [train,df,test]:\n",
        "    frame.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)\n",
        "for frame in [test_df]:\n",
        "    frame.drop(['-Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)\n",
        "#df.head()\n",
        "\n",
        "     "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-d65511ae11fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mframe\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PassengerId'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Name'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'SibSp'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Parch'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Ticket'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Cabin'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mframe\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtest_df\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'-Name'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'SibSp'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Parch'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Ticket'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Cabin'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#df.head()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'train' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NWH9_jV0WjNR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(df.drop('Survived',axis=1),df.Survived,test_size=0.30,random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "So6kICB-ejEX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "array = df.values\n",
        "X = array[:,6:11]\n",
        "Y = array[:,12]\n",
        "x_train, x_test, y_train, y_test = model_selection.train_test_split(X, Y, test_size=0.30, random_state=7)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Exe4L1CSWjNa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "e991bfea-b0d4-40d6-df3c-2fd199daded2"
      },
      "source": [
        "models=[LogisticRegression(),RandomForestClassifier(),\n",
        "        DecisionTreeClassifier()]\n",
        "model_names=['LogisticRegression','RandomForestClassifier','DecisionTree']\n",
        "\n",
        "acc=[]\n",
        "d={}\n",
        "\n",
        "for model in range(len(models)):\n",
        "    clf=models[model]\n",
        "    clf.fit(x_train,y_train)\n",
        "    pred=clf.predict(x_test)\n",
        "    acc.append(accuracy_score(pred,y_test))\n",
        "     \n",
        "d={'Modelling Algo':model_names,'Accuracy':acc}\n",
        "d"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Accuracy': [0.8022388059701493, 0.7947761194029851, 0.7910447761194029],\n",
              " 'Modelling Algo': ['LogisticRegression',\n",
              "  'RandomForestClassifier',\n",
              "  'DecisionTree']}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c0FtLVHbWjNn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 137
        },
        "outputId": "0d2455de-b92d-48fe-ef36-83a2bd6de9e3"
      },
      "source": [
        "acc_frame=pd.DataFrame(d)\n",
        "acc_frame"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Modelling Algo</th>\n",
              "      <th>Accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>0.802239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RandomForestClassifier</td>\n",
              "      <td>0.794776</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DecisionTree</td>\n",
              "      <td>0.791045</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Modelling Algo  Accuracy\n",
              "0      LogisticRegression  0.802239\n",
              "1  RandomForestClassifier  0.794776\n",
              "2            DecisionTree  0.791045"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UV8FX3HFWjN0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "outputId": "6d1c00b0-0d1f-40ab-9ab5-f29db4edccc4"
      },
      "source": [
        "sns.barplot(y='Modelling Algo',x='Accuracy',data=acc_frame)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f25eeb35ac8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ltXXY0O1bU5r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(df.drop('Survived',axis=1),df.Survived,test_size=0.10,random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PZ9tQTjmed_e",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "array = df.values\n",
        "X = array[:,6:11]\n",
        "Y = array[:,12]\n",
        "x_train, x_test, y_train, y_test = model_selection.train_test_split(X, Y, test_size=0.10, random_state=7)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N5z-AassbhT1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "b801e55e-178f-458b-dc09-f5dcab677b14"
      },
      "source": [
        "models=[LogisticRegression(),RandomForestClassifier(),\n",
        "        DecisionTreeClassifier()]\n",
        "model_names=['LogisticRegression','RandomForestClassifier','DecisionTree']\n",
        "\n",
        "acc=[]\n",
        "d={}\n",
        "\n",
        "for model in range(len(models)):\n",
        "    clf=models[model]\n",
        "    clf.fit(x_train,y_train)\n",
        "    pred=clf.predict(x_test)\n",
        "    acc.append(accuracy_score(pred,y_test))\n",
        "     \n",
        "d={'Modelling Algo':model_names,'Accuracy':acc}\n",
        "d"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Accuracy': [0.8444444444444444, 0.8111111111111111, 0.8222222222222222],\n",
              " 'Modelling Algo': ['LogisticRegression',\n",
              "  'RandomForestClassifier',\n",
              "  'DecisionTree']}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iWhKiY_yexqc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(df.drop('Survived',axis=1),df.Survived,test_size=0.40,random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "auei-s4afqfd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "array = df.values\n",
        "X = array[:,6:11]\n",
        "Y = array[:,12]\n",
        "x_train, x_test, y_train, y_test = model_selection.train_test_split(X, Y, test_size=0.40, random_state=7)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GHPWKuZle7Qv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "515f5673-baf5-41c9-c57c-0d8ef24ecf90"
      },
      "source": [
        "models=[LogisticRegression(),RandomForestClassifier(),\n",
        "        DecisionTreeClassifier()]\n",
        "model_names=['LogisticRegression','RandomForestClassifier','DecisionTree']\n",
        "\n",
        "acc=[]\n",
        "d={}\n",
        "\n",
        "for model in range(len(models)):\n",
        "    clf=models[model]\n",
        "    clf.fit(x_train,y_train)\n",
        "    pred=clf.predict(x_test)\n",
        "    acc.append(accuracy_score(pred,y_test))\n",
        "     \n",
        "d={'Modelling Algo':model_names,'Accuracy':acc}\n",
        "d"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Accuracy': [0.7927170868347339, 0.7899159663865546, 0.7983193277310925],\n",
              " 'Modelling Algo': ['LogisticRegression',\n",
              "  'RandomForestClassifier',\n",
              "  'DecisionTree']}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X99kkwbCfyMJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 137
        },
        "outputId": "74aeb30f-5617-48ca-b0bb-8464a43e5401"
      },
      "source": [
        "acc_frame=pd.DataFrame(d)\n",
        "acc_frame"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Modelling Algo</th>\n",
              "      <th>Accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>0.792717</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RandomForestClassifier</td>\n",
              "      <td>0.789916</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DecisionTree</td>\n",
              "      <td>0.798319</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Modelling Algo  Accuracy\n",
              "0      LogisticRegression  0.792717\n",
              "1  RandomForestClassifier  0.789916\n",
              "2            DecisionTree  0.798319"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ySYPTwowizyw",
        "colab_type": "text"
      },
      "source": [
        "Model 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9Uzad5PUiVHg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "1f5da764-9144-4547-a487-a73ffb202ad9"
      },
      "source": [
        "no_of_test=[]\n",
        "for i in range(0,101,10):\n",
        "     if(i!=0):\n",
        "        no_of_test.append(i)\n",
        "no_of_test\n",
        "params_dict={'n_estimators':no_of_test}\n",
        "clf_rf=GridSearchCV(estimator=RandomForestClassifier(),param_grid=params_dict,scoring='accuracy')\n",
        "clf_rf.fit(x_train,y_train)\n",
        "pred=clf_rf.predict(x_test)\n",
        "print(accuracy_score(pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.7899159663865546\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bUjE8yKkivP5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "931116b9-2556-4528-dc42-dcfaa042b03e"
      },
      "source": [
        "params_dict={'C':[0.001, 0.01, 0.1, 1, 10, 100, 1000],'penalty':['l1','l2']}\n",
        "clf_lr=GridSearchCV(estimator=LogisticRegression(),param_grid=params_dict,scoring='accuracy')\n",
        "clf_lr.fit(x_train,y_train)\n",
        "pred=clf_lr.predict(x_test)\n",
        "print(accuracy_score(pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.773109243697479\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8rJKqMBmi4LC",
        "colab_type": "text"
      },
      "source": [
        "Model 2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xi9eTByXi3aP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "d72b21c0-95df-4e05-d435-8294dc2aa548"
      },
      "source": [
        "no_of_test=[]\n",
        "for i in range(0,101,30):\n",
        "     if(i!=0):\n",
        "        no_of_test.append(i)\n",
        "no_of_test\n",
        "params_dict={'n_estimators':no_of_test}\n",
        "clf_rf=GridSearchCV(estimator=RandomForestClassifier(),param_grid=params_dict,scoring='accuracy')\n",
        "clf_rf.fit(x_train,y_train)\n",
        "pred=clf_rf.predict(x_test)\n",
        "print(accuracy_score(pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.7899159663865546\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oF0ndmRijDE-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "59ed6a94-fdf4-48b9-fec1-0cfba882ab4b"
      },
      "source": [
        "params_dict={'C':[0.01, 0.1, 0.1, 1, 30, 100, 100],'penalty':['l1','l2']}\n",
        "clf_lr=GridSearchCV(estimator=LogisticRegression(),param_grid=params_dict,scoring='accuracy')\n",
        "clf_lr.fit(x_train,y_train)\n",
        "pred=clf_lr.predict(x_test)\n",
        "print(accuracy_score(pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.773109243697479\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ellWo6UjjV6F",
        "colab_type": "text"
      },
      "source": [
        "Model 3\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L4MT0ON9jX9I",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "b2d8e2f1-3893-4d1f-ab96-01392823f6f6"
      },
      "source": [
        "no_of_test=[]\n",
        "for i in range(0,101,40):\n",
        "     if(i!=0):\n",
        "        no_of_test.append(i)\n",
        "no_of_test\n",
        "params_dict={'n_estimators':no_of_test}\n",
        "clf_rf=GridSearchCV(estimator=RandomForestClassifier(),param_grid=params_dict,scoring='accuracy')\n",
        "clf_rf.fit(x_train,y_train)\n",
        "pred=clf_rf.predict(x_test)\n",
        "print(accuracy_score(pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.7899159663865546\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b3on3C_kjfig",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "95dd72aa-bbc0-4b16-b2e3-36d627d69843"
      },
      "source": [
        "params_dict={'C':[0.01, 0.1, 0.1, 1, 40, 100, 100],'penalty':['l1','l2']}\n",
        "clf_lr=GridSearchCV(estimator=LogisticRegression(),param_grid=params_dict,scoring='accuracy')\n",
        "clf_lr.fit(x_train,y_train)\n",
        "pred=clf_lr.predict(x_test)\n",
        "print(accuracy_score(pred,y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.773109243697479\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5gagJyUnjmHJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pred=clf_lr.predict(test)\n",
        "#pred\n",
        "dict={'PassengerId':test_df['PassengerId'],'Survived':pred}\n",
        "ans=pd.DataFrame(dict)\n",
        "ans.to_csv('answer.csv',index=False)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
